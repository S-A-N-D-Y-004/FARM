<?php

namespace App\Http\Controllers;

use App\Models\ClosingStock;
use App\Models\MilkStorage;
use Illuminate\Http\Request;
use App\Models\Cream;
use App\Models\PaneerProduction; // Add this import
use App\Models\MilkForCustomer;
use App\Models\Milkproduction;
use App\Models\Curdbatch;
use App\Models\ReturnMilk;
use App\Models\CurdDispatchUnit;
use App\Models\CurdReturn;
use App\Models\Ghee;
use App\Models\ButterModel;
use App\Models\MilkHandlingLoss; // Add this import
use Carbon\Carbon;
use App\Models\Yogurt;
use App\Models\YogurtDispatch;
use App\Models\CurdforCustomer; // Add this import
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

class ClosingStockController extends Controller
{
    public function index(Request $request)
    {
        $activeTab = $request->get('active_tab', 'milk');
        // Get all data grouped by date
        $rawmilk = MilkStorage::orderBy('date', 'asc')->get()->groupBy('date');
        $cream = Cream::orderBy('date', 'desc')->get()->groupBy('date');
        $paneer = PaneerProduction::orderBy('date', 'desc')->get()->groupBy('date');
        $milkcustomers = MilkForCustomer::orderBy('date', 'desc')->get()->groupBy('date');
        $milkproduction = Milkproduction::orderBy('date', 'desc')->get()->groupBy('date');
        $usedmilkcurd = Curdbatch::orderBy('date', 'desc')->get()->groupBy('date');
        $returnmilk = ReturnMilk::orderBy('date', 'desc')->get()->groupBy('date');
        $curdoutput = Curdbatch::orderBy('date', 'desc')->get()->groupBy('date');
        $curddispatch = CurdDispatchUnit::orderBy('date', 'desc')->get()->groupBy('date');
        $curdreturn = CurdReturn::orderBy('date', 'desc')->get()->groupBy('date');
        $ghee = Ghee::orderBy('date', 'desc')->get()->groupBy('date');
        $yogurt = Yogurt::orderBy('date', 'desc')->get()->groupBy('date');
        $usedyogurt = Yogurt::orderBy('date', 'desc')->get()->groupBy('date');
        $yogurtDispatch = YogurtDispatch::orderBy('date', 'desc')->get()->groupBy('date');
        $butter = ButterModel::orderBy('date', 'desc')->get()->groupBy('date');
        $milkHandlingLoss = MilkHandlingLoss::orderBy('date', 'desc')->get()->groupBy('date');
        $curdcustomers = CurdforCustomer::orderBy('date', 'desc')->get()->groupBy('date');

        // Get the first and latest MilkStorage entry
        $firstMilkStorageEntry = MilkStorage::orderBy('date', 'asc')->first();
        $latestMilkStorageEntry = MilkStorage::orderBy('date', 'desc')->first();

        // Initialize an array to store auto-generated dates
        $autoGeneratedDates = [];

        if ($firstMilkStorageEntry) {
            $startDate = Carbon::parse($firstMilkStorageEntry->date);
            $endDate = Carbon::now();

            // Loop through each day from the first entry to today
            while ($startDate->lte($endDate)) {
                $currentDate = $startDate->toDateString();

                // Check if the current date exists in MilkStorage
                $exists = MilkStorage::where('date', $currentDate)->exists();

                if (!$exists) {
                    // Add the auto-generated date to the array
                    $autoGeneratedDates[] = $currentDate;
                }

                // Move to the next day
                $startDate->addDay();
            }
        }

        // Merge all dates from different sources into one unique list
        $mergedDatesAsc = collect()
            ->merge($rawmilk->keys())
            ->merge($autoGeneratedDates)
            ->unique()
            ->sort() // ascending for carry forward
            ->values();

        $mergedDatesDesc = $mergedDatesAsc->sortDesc()->values();

        // Get current page from the request (default to 1)
        $currentPage = request()->get('page', 1);

        // Number of items per page
        $perPage = 10;

        // Slice the data for the current page (descending for display)
        $pageDatesDesc = $mergedDatesDesc->slice(($currentPage - 1) * $perPage, $perPage);

        // Find the first date on this page in ascending order
        $firstDateOnPage = $pageDatesDesc->last(); // because descending order

        // Carry forward calculations (sum all before the first date on this page)
        $carryPaneer = [
            'mixed' => 0,
            'buffalo' => 0,
            'cow' => 0,
            'total' => 0,
        ];
        if ($firstDateOnPage) {
            foreach ($mergedDatesAsc as $date) {
                if ($date == $firstDateOnPage) break;
                $paneerdata = $paneer->get($date)?->first();
                $carryPaneer['mixed'] += $paneerdata->remaining_mixed_paneer ?? 0;
                $carryPaneer['buffalo'] += $paneerdata->remaining_buffalo_paneer ?? 0;
                $carryPaneer['cow'] += $paneerdata->remaining_cow_paneer ?? 0;
            }
            $carryPaneer['total'] = $carryPaneer['mixed'] + $carryPaneer['buffalo'] + $carryPaneer['cow'];
        }

        // Butter carry forward
        $carryButter = [
            'buffalo' => 0,
            'cow' => 0,
            'total' => 0,
        ];
        if ($firstDateOnPage) {
            foreach ($mergedDatesAsc as $date) {
                if ($date == $firstDateOnPage) break;
                $butterData = $butter->get($date)?->first();
                $carryButter['buffalo'] += $butterData->remaining_buffalo_butter ?? 0;
                $carryButter['cow'] += $butterData->remaining_cow_butter ?? 0;
            }
            $carryButter['total'] = $carryButter['buffalo'] + $carryButter['cow'];
        }

        // Cream carry forward
        $carryCream = [
            'buffalo' => 0,
            'cow' => 0,
            'total' => 0,
        ];
        if ($firstDateOnPage) {
            foreach ($mergedDatesAsc as $date) {
                if ($date == $firstDateOnPage) break;
                $creamData = $cream->get($date)?->first();
                $carryCream['buffalo'] += $creamData->remaining_buffalo_cream ?? 0;
                $carryCream['cow'] += $creamData->remaining_cow_cream ?? 0;
            }
            $carryCream['total'] = $carryCream['buffalo'] + $carryCream['cow'];
        }

        // Ghee carry forward
        $carryGhee = [
            'buffalo' => 0,
            'cow' => 0,
            'total' => 0,
        ];
        if ($firstDateOnPage) {
            foreach ($mergedDatesAsc as $date) {
                if ($date == $firstDateOnPage) break;
                $gheeData = $ghee->get($date)?->first();
                $carryGhee['buffalo'] += $gheeData->remaining_buffalo_ghee ?? 0;
                $carryGhee['cow'] += $gheeData->remaining_cow_ghee ?? 0;
            }
            $carryGhee['total'] = $carryGhee['buffalo'] + $carryGhee['cow'];
        }

        // Milk carry forward
        $carryMilk = [
            'buffalo' => 0,
            'cow' => 0,
        ];
        if ($firstDateOnPage) {
            $last_remaining_buffalo = 0;
            $last_remaining_cow = 0;
            foreach ($mergedDatesAsc as $date) {
                if ($date == $firstDateOnPage) break;
                $creamData = $cream->get($date)?->first();
                $paneerData = $paneer->get($date)?->first();
                $production = $milkproduction->get($date)?->first();
                $curd = $usedmilkcurd->get($date)?->first();
                $return = $returnmilk->get($date)?->first();
                $yogurt = $usedyogurt->get($date)?->first();
                $curdCustomers = $curdcustomers->get($date)?->first();
                $curdDispatch = $curddispatch->get($date)?->first();

                $raw_buffalo = $rawmilk->get($date)?->sum('total_buffalo') ?? 0;
                $raw_cow = $rawmilk->get($date)?->sum('total_cow') ?? 0;

                $return_buffalo = $return->total_buffalo_milk ?? 0;
                $return_cow = $return->total_cow_milk ?? 0;

                $total_buffalo = $raw_buffalo + $return_buffalo + $last_remaining_buffalo;
                $total_cow = $raw_cow + $return_cow + $last_remaining_cow;

                $used_buffalo =
                    ($creamData->used_buffalo_milk ?? 0) +
                    ($paneerData->buffalo_milk ?? 0) +
                    ($yogurt->buffalo_milk ?? 0) +
                    ($curd->tm_total_buffalo_milk ?? 0) +
                    ($curd->stm_total_buffalo_milk ?? 0) +
                    ($curd->dtm_total_buffalo_milk ?? 0);

                $used_cow =
                    ($creamData->used_cow_milk ?? 0) +
                    ($paneerData->cow_milk ?? 0) +
                    ($yogurt->cow_milk ?? 0) +
                    ($curd->tm_total_cow_milk ?? 0) +
                    ($curd->stm_total_cow_milk ?? 0) +
                    ($curd->dtm_total_cow_milk ?? 0);

                $dispatched_buffalo =
                    ($milkcustomers->get($date)?->sum('buffalo_milk') ?? 0) +
                    ($production->total_buffalo_milk ?? 0);
                $dispatched_cow =
                    ($milkcustomers->get($date)?->sum('cow_milk') ?? 0) +
                    ($production->total_cow_milk ?? 0);

                // Curd Dispatch and Curd Customers Calculation

                $dispatched_curd_tm_1kg = ($curdcustomers->get($date)?->sum('tm_1kg') ?? 0) +
                    ($curdDispatch->tonned_milk_1kg ?? 0);
                $dispatched_curd_tm_5kg = ($curdcustomers->get($date)?->sum('tm_5kg') ?? 0) +
                    ($curdDispatch->tonned_milk_5kg ?? 0);
                $dispatched_curd_tm_10kg = ($curdcustomers->get($date)?->sum('tm_10kg') ?? 0) +
                    ($curdDispatch->tonned_milk_10kg ?? 0);

                $dispatched_curd_stm_1kg = ($curdcustomers->get($date)?->sum('stm_1kg') ?? 0) +
                    ($curdDispatch->standard_tonned_milk_1kg ?? 0);
                $dispatched_curd_stm_5kg = ($curdcustomers->get($date)?->sum('stm_5kg') ?? 0) +
                    ($curdDispatch->standard_tonned_milk_5kg ?? 0);
                $dispatched_curd_stm_10kg = ($curdcustomers->get($date)?->sum('stm_10kg') ?? 0) +
                    ($curdDispatch->standard_tonned_milk_10kg ?? 0);


                $dispatched_curd_dtm_1kg = ($curdcustomers->get($date)?->sum('dtm_1kg') ?? 0) +
                    ($curdDispatch->double_tonned_milk_1kg ?? 0);
                $dispatched_curd_dtm_5kg = ($curdcustomers->get($date)?->sum('dtm_5kg') ?? 0) +
                    ($curdDispatch->double_tonned_milk_5kg ?? 0);
                $dispatched_curd_dtm_10kg = ($curdcustomers->get($date)?->sum('dtm_10kg') ?? 0) +
                    ($curdDispatch->double_tonned_milk_10kg ?? 0);


                $remaining_buffalo = $total_buffalo - $used_buffalo - $dispatched_buffalo;
                $remaining_cow = $total_cow - $used_cow - $dispatched_cow;

                $last_remaining_buffalo = $remaining_buffalo;
                $last_remaining_cow = $remaining_cow;
            }
            $carryMilk['buffalo'] = $last_remaining_buffalo;
            $carryMilk['cow'] = $last_remaining_cow;
        }

        // Curd carry forward
        $carryCurd = [
            'tm_1kg' => 0,
            'tm_5kg' => 0,
            'tm_10kg' => 0,
            'stm_1kg' => 0,
            'stm_5kg' => 0,
            'stm_10kg' => 0,
            'dtm_1kg' => 0,
            'dtm_5kg' => 0,
            'dtm_10kg' => 0,
        ];
        if ($firstDateOnPage) {
            $prev_tm_1kg = 0;
            $prev_tm_5kg = 0;
            $prev_tm_10kg = 0;
            $prev_stm_1kg = 0;
            $prev_stm_5kg = 0;
            $prev_stm_10kg = 0;
            $prev_dtm_1kg = 0;
            $prev_dtm_5kg = 0;
            $prev_dtm_10kg = 0;
            foreach ($mergedDatesAsc as $date) {
                if ($date == $firstDateOnPage) break;
                $curdproduce = $curdoutput->get($date)?->first();
                $dispatch = $curddispatch->get($date)?->first();

                $tm_1kg_output = $curdproduce->tm_one_kg ?? 0;
                $tm_5kg_output = $curdproduce->tm_five_kg ?? 0;
                $tm_10kg_output = $curdproduce->tm_ten_kg ?? 0;
                $stm_1kg_output = $curdproduce->stm_one_kg ?? 0;
                $stm_5kg_output = $curdproduce->stm_five_kg ?? 0;
                $stm_10kg_output = $curdproduce->stm_ten_kg ?? 0;
                $dtm_1kg_output = $curdproduce->dtm_one_kg ?? 0;
                $dtm_5kg_output = $curdproduce->dtm_five_kg ?? 0;
                $dtm_10kg_output = $curdproduce->dtm_ten_kg ?? 0;

                $tm_1kg_dispatch = $dispatch->tonned_milk_1kg ?? 0;
                $tm_5kg_dispatch = $dispatch->tonned_milk_5kg ?? 0;
                $tm_10kg_dispatch = $dispatch->tonned_milk_10kg ?? 0;
                $stm_1kg_dispatch = $dispatch->standard_tonned_milk_1kg ?? 0;
                $stm_5kg_dispatch = $dispatch->standard_tonned_milk_5kg ?? 0;
                $stm_10kg_dispatch = $dispatch->standard_tonned_milk_10kg ?? 0;
                $dtm_1kg_dispatch = $dispatch->double_tonned_milk_1kg ?? 0;
                $dtm_5kg_dispatch = $dispatch->double_tonned_milk_5kg ?? 0;
                $dtm_10kg_dispatch = $dispatch->double_tonned_milk_10kg ?? 0;

                $tm_1kg = $tm_1kg_output + $prev_tm_1kg - $tm_1kg_dispatch;
                $tm_5kg = $tm_5kg_output + $prev_tm_5kg - $tm_5kg_dispatch;
                $tm_10kg = $tm_10kg_output + $prev_tm_10kg - $tm_10kg_dispatch;

                $stm_1kg = $stm_1kg_output + $prev_stm_1kg - $stm_1kg_dispatch;
                $stm_5kg = $stm_5kg_output + $prev_stm_5kg - $stm_5kg_dispatch;
                $stm_10kg = $stm_10kg_output + $prev_stm_10kg - $stm_10kg_dispatch;

                $dtm_1kg = $dtm_1kg_output + $prev_dtm_1kg - $dtm_1kg_dispatch;
                $dtm_5kg = $dtm_5kg_output + $prev_dtm_5kg - $dtm_5kg_dispatch;
                $dtm_10kg = $dtm_10kg_output + $prev_dtm_10kg - $dtm_10kg_dispatch;

                $prev_tm_1kg = $tm_1kg;
                $prev_tm_5kg = $tm_5kg;
                $prev_tm_10kg = $tm_10kg;
                $prev_stm_1kg = $stm_1kg;
                $prev_stm_5kg = $stm_5kg;
                $prev_stm_10kg = $stm_10kg;
                $prev_dtm_1kg = $dtm_1kg;
                $prev_dtm_5kg = $dtm_5kg;
                $prev_dtm_10kg = $dtm_10kg;
            }
            $carryCurd['tm_1kg'] = $prev_tm_1kg;
            $carryCurd['tm_5kg'] = $prev_tm_5kg;
            $carryCurd['tm_10kg'] = $prev_tm_10kg;
            $carryCurd['stm_1kg'] = $prev_stm_1kg;
            $carryCurd['stm_5kg'] = $prev_stm_5kg;
            $carryCurd['stm_10kg'] = $prev_stm_10kg;
            $carryCurd['dtm_1kg'] = $prev_dtm_1kg;
            $carryCurd['dtm_5kg'] = $prev_dtm_5kg;
            $carryCurd['dtm_10kg'] = $prev_dtm_10kg;
        }

        // Paginate the descending dates for display
        $allDates = new LengthAwarePaginator(
            $pageDatesDesc,
            $mergedDatesDesc->count(),
            $perPage,
            $currentPage,
            ['path' => request()->url(), 'query' => request()->query()]
        );


        $startDate = DB::table('milk_storage')->min('date');
        $endDate = now()->toDateString();

        $dates = [];
        $current = Carbon::parse($startDate);
        $end = Carbon::parse($endDate);
        while ($current->lte($end)) {
            $dates[] = $current->toDateString();
            $current->addDay();
        }

        $yogurtTableData = [];

        $lastRemainingOneKg = 0;
        $lastRemainingFiveKg = 0;
        $lastRemainingTenKg = 0;

        foreach ($dates as $date) {
            $yogurt = DB::table('yogurt')
                ->where('date', $date)
                ->selectRaw('SUM(one_kg) as total_one_kg, SUM(five_kg) as total_five_kg, SUM(ten_kg) as total_ten_kg')
                ->first();

            $dispatch = DB::table('yogurt_dispatch')
                ->where('date', $date)
                ->selectRaw('SUM(one_kg) as dispatched_one_kg, SUM(five_kg) as dispatched_five_kg, SUM(ten_kg) as dispatched_ten_kg')
                ->first();

            // Calculate based on latest records OR carry forward previous if no data
            $newOne = ($yogurt->total_one_kg ?? 0);
            $newFive = ($yogurt->total_five_kg ?? 0);
            $newTen = ($yogurt->total_ten_kg ?? 0);

            $disOne = ($dispatch->dispatched_one_kg ?? 0);
            $disFive = ($dispatch->dispatched_five_kg ?? 0);
            $disTen = ($dispatch->dispatched_ten_kg ?? 0);

            // Add to previous day's stock and subtract dispatch
            $lastRemainingOneKg = $lastRemainingOneKg + $newOne - $disOne;
            $lastRemainingFiveKg = $lastRemainingFiveKg + $newFive - $disFive;
            $lastRemainingTenKg = $lastRemainingTenKg + $newTen - $disTen;

            $yogurtTableData[$date] = [
                'date' => $date,
                'remaining_one_kg' => $lastRemainingOneKg,
                'remaining_five_kg' => $lastRemainingFiveKg,
                'remaining_ten_kg' => $lastRemainingTenKg,
            ];
        }

        // Pagination AFTER the loop
        $collection = collect($yogurtTableData)->sortKeysDesc()->values();
        $currentPage = LengthAwarePaginator::resolveCurrentPage();
        $perPage = 10;
        $currentPageItems = $collection->slice(($currentPage - 1) * $perPage, $perPage)->all();

        $paginatedData = new LengthAwarePaginator(
            $currentPageItems,
            $collection->count(),
            $perPage,
            $currentPage,
            ['path' => request()->url(), 'query' => request()->query()]
        );

        return view('app.closing-stock.index', compact(
            'rawmilk',
            'returnmilk',
            'cream',
            'paneer',
            'usedmilkcurd',
            'usedyogurt',
            'milkcustomers',
            'milkproduction',
            'allDates',
            'carryPaneer',
            'yogurtTableData',
            'carryButter',
            'carryCream',
            'carryGhee',
            'carryMilk',
            'carryCurd',
            'curdoutput',
            'curddispatch',
            'curdreturn',
            'ghee',
            'butter',
            'autoGeneratedDates',
            'activeTab',
            'milkHandlingLoss',
            'curdcustomers',
            'paginatedData' // pass to view
        ));
    }

    // public function getClosingStock()
    // {
    //     // Get distinct dates from yogurt and dispatch tables
    //     $dates = DB::table('yogurt')
    //         ->select('date')
    //         ->distinct()
    //         ->orderBy('date', 'desc')
    //         ->get();

    //     $yogurtTableData = [];

    //     foreach ($dates as $dateObj) {
    //         $date = $dateObj->date;

    //         $yogurt = DB::table('yogurt')
    //             ->where('date', $date)
    //             ->selectRaw('SUM(one_kg) as total_one_kg, SUM(five_kg) as total_five_kg, SUM(ten_kg) as total_ten_kg')
    //             ->first();

    //         $dispatch = DB::table('yogurt_dispatch')
    //             ->where('date', $date)
    //             ->selectRaw('SUM(one_kg) as dispatched_one_kg, SUM(five_kg) as dispatched_five_kg, SUM(ten_kg) as dispatched_ten_kg')
    //             ->first();

    //         $remaining_one_kg = ($yogurt->total_one_kg ?? 0) - ($dispatch->dispatched_one_kg ?? 0);
    //         $remaining_five_kg = ($yogurt->total_five_kg ?? 0) - ($dispatch->dispatched_five_kg ?? 0);
    //         $remaining_ten_kg = ($yogurt->total_ten_kg ?? 0) - ($dispatch->dispatched_ten_kg ?? 0);

    //         $yogurtTableData[$date] = [
    //             'remaining_one_kg' => $remaining_one_kg,
    //             'remaining_five_kg' => $remaining_five_kg,
    //             'remaining_ten_kg' => $remaining_ten_kg,
    //         ];
    //     }

    //     return view('app.closing-stock.index', compact('yogurtTableData'));
    // }


}

